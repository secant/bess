import scapy.all as scapy
import sys
import glob
import socket
import time
import sugar
from time import gmtime, strftime

## HANDY UTILS AND GLOBAL VARS ##
SOCKET_PATH = '/tmp/bess_unix_'
SCRIPT_STARTTIME = strftime("%Y-%m-%d-%H-%M-%S", gmtime())

# Generate a UnixSocketPort and a Socket to talk to it


def gen_socket_and_port(sockname):
    socket_port = UnixSocketPort(
        name=sockname,
        path='@' +
        SOCKET_PATH +
        sockname)

    s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
    s.settimeout(5)  # five second timeout
    s.connect('\0' + SOCKET_PATH + sockname)
    return socket_port, s

# Craft a packet with the specified IP addresses
# All the other fields -- Ether, ports -- are dummy values.


def gen_packet(proto, src_ip, dst_ip):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
    ip = scapy.IP(src=src_ip, dst=dst_ip)
    udp = proto(sport=10001, dport=10002)
    payload = 'helloworld'
    pkt = eth / ip / udp / payload
    return str(pkt)


def pkt_str(pkt):
    if(pkt is None):
        return "None"
    else:
        return pkt.summary()

# Convert an IP address to an integer


def aton(ip):
    return socket.inet_aton(ip)

# These are just for the crash test
crash_test_packets = [
    gen_packet(scapy.UDP, '172.16.100.1', '10.0.0.1'),
    gen_packet(scapy.UDP, '172.12.55.99', '12.34.56.78'),
    gen_packet(scapy.UDP, '172.12.55.99', '10.0.0.1'),
    gen_packet(scapy.UDP, '172.16.100.1', '12.34.56.78'),
    gen_packet(scapy.TCP, '172.12.55.99', '12.34.56.78'),
    gen_packet(scapy.UDP, '192.168.1.123', '12.34.56.78')
]

## TEST FUNCTIONS ##

# All this does is subject a module to load and make sure it
# doesn't crash


def crash_test(module, num_input_ports, num_output_ports):
    for i in range(num_input_ports):
        src = Source()
        src -> Rewrite(templates=crash_test_packets) -> i:module
    for i in range(num_output_ports):
        sink = Sink()
        module:i -> sink

    time.sleep(5)


## RUN TEST LOOP ##

for file in glob.glob(sys.argv[0] + "conf/testing/module_tests/*.py"):
    bess.reset_all()
    CRASH_TEST_INPUTS = []
    OUTPUT_TEST_INPUTS = []
    CUSTOM_TEST_FUNCTIONS = []

    print("-- Running Module Tests for " + file + " --")
    while True:  # wrap in this scoping to make sure variables don't leak into this script
        exec(sugar.xform_file(file))
        break

    crash_testid = 1
    for test in CRASH_TEST_INPUTS:
        crash_test(test[0], test[1], test[2])
        print("   " +
              str(test[0]) +
              " crash test " +
              str(crash_testid) +
              ": PASS")
        crash_testid += 1

    output_testid = 1
    for test in OUTPUT_TEST_INPUTS:
        input_ports = []
        output_ports = []
        sockets = []

        for port_num in range(max(test[1], test[2])):
            sockname = str(output_testid) + "moduletesting-" + \
                SCRIPT_STARTTIME + str(port_num)
            socket_port, mysocket = gen_socket_and_port(sockname)
            input_ports.append(PortInc(port=sockname))
            output_ports.append(PortOut(port=sockname))
            sockets.append(mysocket)
            if (port_num < test[1]):
                input_ports[port_num] -> port_num:test[0]
            if (port_num < test[2]):
                test[0]:port_num -> output_ports[port_num]

        bess.resume_all()

        for test_case in test[3]:
            input_port = test_case["input_port"]
            output_port = test_case["output_port"]
            input_pkt = test_case["input_packet"]
            output_pkt = test_case["output_packet"]
            if(input_pkt is not None):
                sockets[input_port].send(str(input_pkt))
            try:
                return_pkt = scapy.Ether(sockets[output_port].recv(2048))
            except socket.timeout:
                return_pkt = None
            if(not ((return_pkt is None and output_pkt is None) or
                    (return_pkt == scapy.Ether(output_pkt)))):
                print("Test failed!\n")
                print("Input packet: " + pkt_str(input_pkt) + "\n")
                print("Expected: " + pkt_str(output_pkt) + "\n")
                print("Received: " + pkt_str(return_pkt) + "\n")
                for sock in sockets:
                    sock.close()
                sys.exit(2)
            print("   " +
                  str(test[0]) +
                  " output test " +
                  str(output_testid) +
                  ": PASS")
        # tests passed!
        output_testid += 1
        for sock in sockets:
            sock.close()
        bess.pause_all()

    for test in CUSTOM_TEST_FUNCTIONS:
        result = test()
        if(result != 0):
            print("Test failed!\n")
            print("Return value: " + str(result) + "\n")
            sys.exit(result)
        print("   " + str(test) + " custom test: PASS")
    # All done!
    print "\n\n"

bess.reset_all()
